# Mac OS ANICI Makefile
#
# There are two ways to build, either as a shared library and
# executable that links against it or as a statically linked
# executable.
#
# The default build creates a shared library and dynamically linked
# executbale. If you define the make macro STATIC, as any value, a
# staticaly linked executable is created.
#

STATIC=         YES

PREFIX=         /opt/anici
PROG=           anici

CC=             @echo CC $<; cc -pipe
LIBS=           -framework Foundation

COPT?=          -DNDEBUG -Ofast -Oz
ifdef RELEASE
COPT+=          -flto
endif

WARNINGS=       -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter
CFLAGS=         -g $(COPT) -I. -Imacosx $(WARNINGS)
LDFLAGS=        -g $(COPT)

ifndef STATIC
LIB=            lib$(PROG).dylib
endif

PCH=            fwd.h
GCH=            $(PCH).gch

MAN1=		doc/man1/ici.1          \
	        doc/man1/icifuncs.1     \
	        doc/man1/icioo.1        \
	        doc/man1/iciops.1       \
	        doc/man1/icire.1        \
	        doc/man1/icistmt.1      \
	        doc/man1/icitypes.1

#
# Where things get installed.
#
BINDIR=         $(PREFIX)/bin
MANDIR=         $(PREFIX)/share/man/man1
INCDIR=         $(PREFIX)/include
LIBDIR=         $(PREFIX)/lib
ICILIBDIR=      $(LIBDIR)/$(PROG)
DOCDIR=         $(PREFIX)/share/doc

INSTALL_EXE=    install -c -m 555
INSTALL_DATA=   install -c -m 444

#
# Interpreter object files
#
OBJS=                                                                                   \
	alloc.o aplfuncs.o archive.o arith.o array.o                                    \
	buf.o                                                                           \
	call.o catch.o cfunc.o cfunco.o compile.o conf.o control.o crc.o crc32c.o       \
	error.o exec.o exerror.o events.o                                               \
        file.o findpath.o float.o forall.o func.o                                       \
        handle.o hash.o                                                                 \
        icimain.o idb.o idb2.o init.o int.o                                             \
	lex.o load.o                                                                    \
        macosx/semaphore.o                                                              \
        mark.o mem.o method.o mkvar.o                                                   \
        null.o                                                                          \
	object.o oofuncs.o op.o                                                         \
        parse.o pc.o profile.o ptr.o                                                    \
	pcre/maketables.o pcre/pcre.o pcre/study.o                                      \
        refuncs.o regexp.o restore.o                                                    \
        save.o set.o sfile.o signals.o smash.o src.o sstring.o strtol.o                 \
                struct.o syserr.o string.o                                              \
	thread.o                                                                        \
        unary.o uninit.o


################################################################
#
#
#
################################################################

all: $(PROG) ici.h

ifdef STATIC
$(PROG): main.o $(OBJS)
	@echo LD $@; cc $(LDFLAGS) -o $@ main.o $(OBJS) $(LIBS)
endif

ifndef STATIC
$(PROG): main.o $(LIB)
	@echo LD $@
	$(CC) $(LDFLAGS) -o $@ main.o $(LIB) $(LIBS)

$(LIB)  : $(OBJS)
	@echo LIBTOOL $@; libtool -macosx_version_min 10.11 -dynamic -o $@ $(OBJS) -lc -lSystem

.PRECIOUS: $(LIB)
endif

# The .h file contains the actual code
sstring.o : sstring.h

################################################################
#
# PCH
#

main.o $(OBJS) : $(GCH)

pch	: $(GCH)

$(GCH) : $(PCH) conf/osx.h alloc.h
	$(CC) $(CFLAGS) $(PCH)


################################################################
#
# INSTALL TARGETS
#
################################################################

# Headers that are potentially used in module writing are made public
ICIHDRS= ici.h icistr-setup.h

# Useful public documentation
DOCS= doc/ici.pdf

ici.h: $(PROG)
	ANICIPATH=. ./$(PROG) mk-ici-h.ici conf/osx.h

# Install the init file, headers and docs.
ifndef STATIC
install: $(PROG) $(LIB) ici.h
	@echo '=========================================='
	@echo 'Creating installation directories'
	@echo '=========================================='
	[ -d $(BINDIR) ] || mkdir -p $(BINDIR)
	-mkdir -p $(MANDIR)
	-mkdir -p $(INCDIR)
	-mkdir -p $(LIBDIR)
	-mkdir -p $(ICILIBDIR)
	-mkdir -p $(DOCDIR)
	@echo '=========================================='
	@echo 'Installing ici interpreter and manual pages'
	@echo '=========================================='
	$(INSTALL_EXE) $(PROG) $(BINDIR)
	for f in $(MAN1); do\
	    $(INSTALL_DATA) $$f $(MANDIR);\
	done
	@echo '=========================================='
	@echo 'Installing ici library'
	@echo '=========================================='
	$(INSTALL_DATA) $(LIB) $(LIBDIR)
	@echo '=========================================='
	@echo 'Core files'
	@echo '=========================================='
	$(INSTALL_DATA) ici4core*.ici $(ICILIBDIR)
	@echo '=========================================='
	@echo 'Headers'
	@echo '=========================================='
	$(INSTALL_DATA) $(ICIHDRS) $(INCDIR)
	@echo '=========================================='
	@echo 'Documentation'
	@echo '=========================================='
	$(INSTALL_DATA) $(DOCS) $(DOCDIR)
	@echo '=========================================='
	@echo 'Install done'
	@echo '=========================================='
endif

################################################################

clean:
	rm -f $(PROG) $(LIB) main.o $(OBJS) ici.h

clobber: clean
	rm -f .depend $(GCH)

depend:
	mkdep $(CFLAGS) $(OBJS:.o=.c) main.c

-include .depend
