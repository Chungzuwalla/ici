// -*- mode:c++ -*-

#ifndef ICI_DEBUGGER_H
#define ICI_DEBUGGER_H

#include "object.h"

namespace ici
{

/*
 * The following portion of this file exports to ici.h. --ici.h-start--
 */

/*
 * ICI debug interface.  The interpreter has a global debug interface enable
 * flag, 'debug_enabled', and a global pointer, 'ici_debug', to one of
 * these structs.  If the flag is set, the interpreter calls these functions.
 * See 'ici_debug' and 'debug_enabled'.
 *
 * error()              Called with the current value of error (redundant,
 *                      for historical reasons) and a source line marker
 *                      object (see 'ici_src_t') on an uncaught error.
 *                      Actually, this is not so useful, because it is
 *                      currently called after the stack has been unwound.  So
 *                      a user would not be able to see their stack traceback
 *                      and local context.  This behaviour may change in
 *                      future.
 *
 * fncall()             Called with the object being called, the pointer to
 *                      the first actual argument (see 'ARGS()' and the number
 *                      of actual arguments just before control is transfered
 *                      to a callable object (function, method or anything
 *                      else).
 *
 * fnresult()           Called with the object being returned from any call.
 *
 * src()                Called each time execution passes into the region of a
 *                      new source line marker.  These typically occur before
 *                      any of the code generated by a particular line of
 *                      source.
 *
 * watch()              In theory, called when assignments are made.  However
 *                      optimisations in the interpreter have made this
 *                      difficult to support without performance penalties
 *                      even when debugging is not enabled.  So it is
 *                      currently disabled.  The function remains here pending
 *                      discovery of a method of achieving it efficiently.
 *
 * This --class-- forms part of the --ici-api--.
 */
class debugger
{
public:
    virtual ~debugger();
    virtual void error(char *, struct src *);
    virtual void fncall(object *, object **, int);
    virtual void fnresult(object *);
    virtual void src(struct src *);
    virtual void watch(object *, object *, object *);
};

/*
 * End of ici.h export. --ici.h-end--
 */


} // namespace ici

#endif
