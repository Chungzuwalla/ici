src_dir := ".";
dst_dir := ".";

incs := [array
    argv[1],
    "fwd.h",
    "object.h",
    "alloc.h",
    "archive.h",
    "buf.h",
    "catch.h",
    "cfunc.h",
    "array.h",
    "int.h",
    "float.h",
    "exec.h",
    "file.h",
    "forall.h",
    "func.h",
    "handle.h",
    "mark.h",
    "mem.h",
    "method.h",
    "null.h",
    "error.h",
    "op.h",
    "parse.h",
    "pc.h",
    "profile.h",
    "ptr.h",
    "re.h",
    "set.h",
    "src.h",
    "str.h",
    "struct.h",
    "wrap.h",
];

icih := array
(
    "/*\n"
    " * anici.h - ANICI exports for C and C++ interfacing to ANICI.\n"
    " *\n"
    " * This file is automatically generated from internal ANICI include files.\n"
    " * It is platform specific. ",
        sprintf("This file is based on \"%s\".\n", argv[1]),
    " */\n"
    "\n"
    "#ifndef ANICI_ANICI_H\n"
    "#define ANICI_ANICI_H\n"
    "\n"
);

if (argc > 2)
    src_dir = argv[2];
if (argc > 3)
    dst_dir = argv[3];

forall (i in incs)
{
    t = getfile(f = fopen(pathjoin(src_dir, i)));
    close(f);
    bits = smash(t, #(?s)--ici.h-start--.*?\*/(.*?)(/\*[^/]*--ici.h-end--[^/]*\*/)#, "\\1");
    if (len(bits) > 0)
    {
        push(icih, sprintf("\n/* From %s */\n", i));
        forall (b in bits)
            push(icih, b);
    }
}
push(icih, "\n#endif /* ANICI_ANICI_H */\n");

puts(implode(icih), fopen(pathjoin(dst_dir, "anici.h"), "w"));
