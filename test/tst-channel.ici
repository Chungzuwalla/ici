N := 100*1000;

// The bind() function returns a callable object that "binds" some
// arguments to a function. Calling the returned object calls the
// "bound" function with those arguments. Arguments passed to the
// callable object are passed as extra arguments to the "bound"
// function.
//
local bind(f) {
    var binding = [class
        new(f) {
            var vargs = @[array];
            this = this:^new();
            this.f := f;
            this.args := vargs;
            return this;
        }

        invocation() {
            var vargs = @[array];
            return call(this.f, this.args + vargs);
        }
    ];
    var vargs = @[array];
    bound := call(binding:new, f, vargs);
    return bound:invocation;
}

// runner receives callable objects from a a channel, testing forall
// with a channel, and calls them. It stops when the channel is
// closed.
//
local runner(input) {
    forall (fn in input) {
        fn();
    }
}

// The test...
//
// - create a work channel
// - start a runner to process the channel
// - post bound functions to the runner
// - tell the runner to stop
// - wait for it to stop
//

ch := channel(100);
e := go(runner, ch);

for (x := 1; x <= N; ++x) {
    put(ch, bind(printf, "%d\n", x));
}
close(ch);

waitfor(e.status == "finished"; e);
